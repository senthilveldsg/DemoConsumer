/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.dcsg.pc.eventing.schema.syndigopimcopy;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class DataValues extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5665539974009129937L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DataValues\",\"namespace\":\"com.dcsg.pc.eventing.schema.syndigopimcopy\",\"fields\":[{\"name\":\"group\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Group\",\"fields\":[{\"name\":\"valuesMap\",\"type\":{\"type\":\"map\",\"values\":\"DataValues\"}}]},\"java-class\":\"java.util.List\"}],\"default\":null},{\"name\":\"values\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"AttributeValue\",\"fields\":[{\"name\":\"value\",\"type\":\"string\"}]},\"java-class\":\"java.util.List\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DataValues> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DataValues> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<DataValues> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<DataValues> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<DataValues> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this DataValues to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a DataValues from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a DataValues instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static DataValues fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.List<com.dcsg.pc.eventing.schema.syndigopimcopy.Group> group;
  private java.util.List<com.dcsg.pc.eventing.schema.syndigopimcopy.AttributeValue> values;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DataValues() {}

  /**
   * All-args constructor.
   * @param group The new value for group
   * @param values The new value for values
   */
  public DataValues(java.util.List<com.dcsg.pc.eventing.schema.syndigopimcopy.Group> group, java.util.List<com.dcsg.pc.eventing.schema.syndigopimcopy.AttributeValue> values) {
    this.group = group;
    this.values = values;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return group;
    case 1: return values;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: group = (java.util.List<com.dcsg.pc.eventing.schema.syndigopimcopy.Group>)value$; break;
    case 1: values = (java.util.List<com.dcsg.pc.eventing.schema.syndigopimcopy.AttributeValue>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'group' field.
   * @return The value of the 'group' field.
   */
  public java.util.List<com.dcsg.pc.eventing.schema.syndigopimcopy.Group> getGroup() {
    return group;
  }


  /**
   * Sets the value of the 'group' field.
   * @param value the value to set.
   */
  public void setGroup(java.util.List<com.dcsg.pc.eventing.schema.syndigopimcopy.Group> value) {
    this.group = value;
  }

  /**
   * Gets the value of the 'values' field.
   * @return The value of the 'values' field.
   */
  public java.util.List<com.dcsg.pc.eventing.schema.syndigopimcopy.AttributeValue> getValues() {
    return values;
  }


  /**
   * Sets the value of the 'values' field.
   * @param value the value to set.
   */
  public void setValues(java.util.List<com.dcsg.pc.eventing.schema.syndigopimcopy.AttributeValue> value) {
    this.values = value;
  }

  /**
   * Creates a new DataValues RecordBuilder.
   * @return A new DataValues RecordBuilder
   */
  public static com.dcsg.pc.eventing.schema.syndigopimcopy.DataValues.Builder newBuilder() {
    return new com.dcsg.pc.eventing.schema.syndigopimcopy.DataValues.Builder();
  }

  /**
   * Creates a new DataValues RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DataValues RecordBuilder
   */
  public static com.dcsg.pc.eventing.schema.syndigopimcopy.DataValues.Builder newBuilder(com.dcsg.pc.eventing.schema.syndigopimcopy.DataValues.Builder other) {
    if (other == null) {
      return new com.dcsg.pc.eventing.schema.syndigopimcopy.DataValues.Builder();
    } else {
      return new com.dcsg.pc.eventing.schema.syndigopimcopy.DataValues.Builder(other);
    }
  }

  /**
   * Creates a new DataValues RecordBuilder by copying an existing DataValues instance.
   * @param other The existing instance to copy.
   * @return A new DataValues RecordBuilder
   */
  public static com.dcsg.pc.eventing.schema.syndigopimcopy.DataValues.Builder newBuilder(com.dcsg.pc.eventing.schema.syndigopimcopy.DataValues other) {
    if (other == null) {
      return new com.dcsg.pc.eventing.schema.syndigopimcopy.DataValues.Builder();
    } else {
      return new com.dcsg.pc.eventing.schema.syndigopimcopy.DataValues.Builder(other);
    }
  }

  /**
   * RecordBuilder for DataValues instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DataValues>
    implements org.apache.avro.data.RecordBuilder<DataValues> {

    private java.util.List<com.dcsg.pc.eventing.schema.syndigopimcopy.Group> group;
    private java.util.List<com.dcsg.pc.eventing.schema.syndigopimcopy.AttributeValue> values;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.dcsg.pc.eventing.schema.syndigopimcopy.DataValues.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.group)) {
        this.group = data().deepCopy(fields()[0].schema(), other.group);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.values)) {
        this.values = data().deepCopy(fields()[1].schema(), other.values);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing DataValues instance
     * @param other The existing instance to copy.
     */
    private Builder(com.dcsg.pc.eventing.schema.syndigopimcopy.DataValues other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.group)) {
        this.group = data().deepCopy(fields()[0].schema(), other.group);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.values)) {
        this.values = data().deepCopy(fields()[1].schema(), other.values);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'group' field.
      * @return The value.
      */
    public java.util.List<com.dcsg.pc.eventing.schema.syndigopimcopy.Group> getGroup() {
      return group;
    }


    /**
      * Sets the value of the 'group' field.
      * @param value The value of 'group'.
      * @return This builder.
      */
    public com.dcsg.pc.eventing.schema.syndigopimcopy.DataValues.Builder setGroup(java.util.List<com.dcsg.pc.eventing.schema.syndigopimcopy.Group> value) {
      validate(fields()[0], value);
      this.group = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'group' field has been set.
      * @return True if the 'group' field has been set, false otherwise.
      */
    public boolean hasGroup() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'group' field.
      * @return This builder.
      */
    public com.dcsg.pc.eventing.schema.syndigopimcopy.DataValues.Builder clearGroup() {
      group = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'values' field.
      * @return The value.
      */
    public java.util.List<com.dcsg.pc.eventing.schema.syndigopimcopy.AttributeValue> getValues() {
      return values;
    }


    /**
      * Sets the value of the 'values' field.
      * @param value The value of 'values'.
      * @return This builder.
      */
    public com.dcsg.pc.eventing.schema.syndigopimcopy.DataValues.Builder setValues(java.util.List<com.dcsg.pc.eventing.schema.syndigopimcopy.AttributeValue> value) {
      validate(fields()[1], value);
      this.values = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'values' field has been set.
      * @return True if the 'values' field has been set, false otherwise.
      */
    public boolean hasValues() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'values' field.
      * @return This builder.
      */
    public com.dcsg.pc.eventing.schema.syndigopimcopy.DataValues.Builder clearValues() {
      values = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DataValues build() {
      try {
        DataValues record = new DataValues();
        record.group = fieldSetFlags()[0] ? this.group : (java.util.List<com.dcsg.pc.eventing.schema.syndigopimcopy.Group>) defaultValue(fields()[0]);
        record.values = fieldSetFlags()[1] ? this.values : (java.util.List<com.dcsg.pc.eventing.schema.syndigopimcopy.AttributeValue>) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DataValues>
    WRITER$ = (org.apache.avro.io.DatumWriter<DataValues>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DataValues>
    READER$ = (org.apache.avro.io.DatumReader<DataValues>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.group == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.group.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (com.dcsg.pc.eventing.schema.syndigopimcopy.Group e0: this.group) {
        actualSize0++;
        out.startItem();
        e0.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

    if (this.values == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size1 = this.values.size();
      out.writeArrayStart();
      out.setItemCount(size1);
      long actualSize1 = 0;
      for (com.dcsg.pc.eventing.schema.syndigopimcopy.AttributeValue e1: this.values) {
        actualSize1++;
        out.startItem();
        e1.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize1 != size1)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.group = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<com.dcsg.pc.eventing.schema.syndigopimcopy.Group> a0 = this.group;
        if (a0 == null) {
          a0 = new SpecificData.Array<com.dcsg.pc.eventing.schema.syndigopimcopy.Group>((int)size0, SCHEMA$.getField("group").schema().getTypes().get(1));
          this.group = a0;
        } else a0.clear();
        SpecificData.Array<com.dcsg.pc.eventing.schema.syndigopimcopy.Group> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.dcsg.pc.eventing.schema.syndigopimcopy.Group>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            com.dcsg.pc.eventing.schema.syndigopimcopy.Group e0 = (ga0 != null ? ga0.peek() : null);
            if (e0 == null) {
              e0 = new com.dcsg.pc.eventing.schema.syndigopimcopy.Group();
            }
            e0.customDecode(in);
            a0.add(e0);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.values = null;
      } else {
        long size1 = in.readArrayStart();
        java.util.List<com.dcsg.pc.eventing.schema.syndigopimcopy.AttributeValue> a1 = this.values;
        if (a1 == null) {
          a1 = new SpecificData.Array<com.dcsg.pc.eventing.schema.syndigopimcopy.AttributeValue>((int)size1, SCHEMA$.getField("values").schema().getTypes().get(1));
          this.values = a1;
        } else a1.clear();
        SpecificData.Array<com.dcsg.pc.eventing.schema.syndigopimcopy.AttributeValue> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<com.dcsg.pc.eventing.schema.syndigopimcopy.AttributeValue>)a1 : null);
        for ( ; 0 < size1; size1 = in.arrayNext()) {
          for ( ; size1 != 0; size1--) {
            com.dcsg.pc.eventing.schema.syndigopimcopy.AttributeValue e1 = (ga1 != null ? ga1.peek() : null);
            if (e1 == null) {
              e1 = new com.dcsg.pc.eventing.schema.syndigopimcopy.AttributeValue();
            }
            e1.customDecode(in);
            a1.add(e1);
          }
        }
      }

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.group = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<com.dcsg.pc.eventing.schema.syndigopimcopy.Group> a0 = this.group;
            if (a0 == null) {
              a0 = new SpecificData.Array<com.dcsg.pc.eventing.schema.syndigopimcopy.Group>((int)size0, SCHEMA$.getField("group").schema().getTypes().get(1));
              this.group = a0;
            } else a0.clear();
            SpecificData.Array<com.dcsg.pc.eventing.schema.syndigopimcopy.Group> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.dcsg.pc.eventing.schema.syndigopimcopy.Group>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                com.dcsg.pc.eventing.schema.syndigopimcopy.Group e0 = (ga0 != null ? ga0.peek() : null);
                if (e0 == null) {
                  e0 = new com.dcsg.pc.eventing.schema.syndigopimcopy.Group();
                }
                e0.customDecode(in);
                a0.add(e0);
              }
            }
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.values = null;
          } else {
            long size1 = in.readArrayStart();
            java.util.List<com.dcsg.pc.eventing.schema.syndigopimcopy.AttributeValue> a1 = this.values;
            if (a1 == null) {
              a1 = new SpecificData.Array<com.dcsg.pc.eventing.schema.syndigopimcopy.AttributeValue>((int)size1, SCHEMA$.getField("values").schema().getTypes().get(1));
              this.values = a1;
            } else a1.clear();
            SpecificData.Array<com.dcsg.pc.eventing.schema.syndigopimcopy.AttributeValue> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<com.dcsg.pc.eventing.schema.syndigopimcopy.AttributeValue>)a1 : null);
            for ( ; 0 < size1; size1 = in.arrayNext()) {
              for ( ; size1 != 0; size1--) {
                com.dcsg.pc.eventing.schema.syndigopimcopy.AttributeValue e1 = (ga1 != null ? ga1.peek() : null);
                if (e1 == null) {
                  e1 = new com.dcsg.pc.eventing.schema.syndigopimcopy.AttributeValue();
                }
                e1.customDecode(in);
                a1.add(e1);
              }
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










