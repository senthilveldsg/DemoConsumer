/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.dcsg.pc.eventing.schema.syndigopimcopy;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class RelationshipLink extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7927219058046747950L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RelationshipLink\",\"namespace\":\"com.dcsg.pc.eventing.schema.syndigopimcopy\",\"fields\":[{\"name\":\"attributes\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"DataValues\",\"fields\":[{\"name\":\"group\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Group\",\"fields\":[{\"name\":\"valuesMap\",\"type\":{\"type\":\"map\",\"values\":\"DataValues\"}}]},\"java-class\":\"java.util.List\"}],\"default\":null},{\"name\":\"values\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"AttributeValue\",\"fields\":[{\"name\":\"value\",\"type\":\"string\"}]},\"java-class\":\"java.util.List\"}],\"default\":null}]}}]},{\"name\":\"relTo\",\"type\":{\"type\":\"record\",\"name\":\"Link\",\"fields\":[{\"name\":\"data\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"RelationshipData\",\"fields\":[{\"name\":\"attributes\",\"type\":{\"type\":\"map\",\"values\":\"DataValues\"}}]}],\"default\":null},{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"type\",\"type\":\"string\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<RelationshipLink> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RelationshipLink> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<RelationshipLink> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<RelationshipLink> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<RelationshipLink> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this RelationshipLink to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a RelationshipLink from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a RelationshipLink instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static RelationshipLink fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.Map<java.lang.CharSequence,com.dcsg.pc.eventing.schema.syndigopimcopy.DataValues> attributes;
  private com.dcsg.pc.eventing.schema.syndigopimcopy.Link relTo;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RelationshipLink() {}

  /**
   * All-args constructor.
   * @param attributes The new value for attributes
   * @param relTo The new value for relTo
   */
  public RelationshipLink(java.util.Map<java.lang.CharSequence,com.dcsg.pc.eventing.schema.syndigopimcopy.DataValues> attributes, com.dcsg.pc.eventing.schema.syndigopimcopy.Link relTo) {
    this.attributes = attributes;
    this.relTo = relTo;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return attributes;
    case 1: return relTo;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: attributes = (java.util.Map<java.lang.CharSequence,com.dcsg.pc.eventing.schema.syndigopimcopy.DataValues>)value$; break;
    case 1: relTo = (com.dcsg.pc.eventing.schema.syndigopimcopy.Link)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'attributes' field.
   * @return The value of the 'attributes' field.
   */
  public java.util.Map<java.lang.CharSequence,com.dcsg.pc.eventing.schema.syndigopimcopy.DataValues> getAttributes() {
    return attributes;
  }


  /**
   * Sets the value of the 'attributes' field.
   * @param value the value to set.
   */
  public void setAttributes(java.util.Map<java.lang.CharSequence,com.dcsg.pc.eventing.schema.syndigopimcopy.DataValues> value) {
    this.attributes = value;
  }

  /**
   * Gets the value of the 'relTo' field.
   * @return The value of the 'relTo' field.
   */
  public com.dcsg.pc.eventing.schema.syndigopimcopy.Link getRelTo() {
    return relTo;
  }


  /**
   * Sets the value of the 'relTo' field.
   * @param value the value to set.
   */
  public void setRelTo(com.dcsg.pc.eventing.schema.syndigopimcopy.Link value) {
    this.relTo = value;
  }

  /**
   * Creates a new RelationshipLink RecordBuilder.
   * @return A new RelationshipLink RecordBuilder
   */
  public static com.dcsg.pc.eventing.schema.syndigopimcopy.RelationshipLink.Builder newBuilder() {
    return new com.dcsg.pc.eventing.schema.syndigopimcopy.RelationshipLink.Builder();
  }

  /**
   * Creates a new RelationshipLink RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RelationshipLink RecordBuilder
   */
  public static com.dcsg.pc.eventing.schema.syndigopimcopy.RelationshipLink.Builder newBuilder(com.dcsg.pc.eventing.schema.syndigopimcopy.RelationshipLink.Builder other) {
    if (other == null) {
      return new com.dcsg.pc.eventing.schema.syndigopimcopy.RelationshipLink.Builder();
    } else {
      return new com.dcsg.pc.eventing.schema.syndigopimcopy.RelationshipLink.Builder(other);
    }
  }

  /**
   * Creates a new RelationshipLink RecordBuilder by copying an existing RelationshipLink instance.
   * @param other The existing instance to copy.
   * @return A new RelationshipLink RecordBuilder
   */
  public static com.dcsg.pc.eventing.schema.syndigopimcopy.RelationshipLink.Builder newBuilder(com.dcsg.pc.eventing.schema.syndigopimcopy.RelationshipLink other) {
    if (other == null) {
      return new com.dcsg.pc.eventing.schema.syndigopimcopy.RelationshipLink.Builder();
    } else {
      return new com.dcsg.pc.eventing.schema.syndigopimcopy.RelationshipLink.Builder(other);
    }
  }

  /**
   * RecordBuilder for RelationshipLink instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RelationshipLink>
    implements org.apache.avro.data.RecordBuilder<RelationshipLink> {

    private java.util.Map<java.lang.CharSequence,com.dcsg.pc.eventing.schema.syndigopimcopy.DataValues> attributes;
    private com.dcsg.pc.eventing.schema.syndigopimcopy.Link relTo;
    private com.dcsg.pc.eventing.schema.syndigopimcopy.Link.Builder relToBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.dcsg.pc.eventing.schema.syndigopimcopy.RelationshipLink.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.attributes)) {
        this.attributes = data().deepCopy(fields()[0].schema(), other.attributes);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.relTo)) {
        this.relTo = data().deepCopy(fields()[1].schema(), other.relTo);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasRelToBuilder()) {
        this.relToBuilder = com.dcsg.pc.eventing.schema.syndigopimcopy.Link.newBuilder(other.getRelToBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing RelationshipLink instance
     * @param other The existing instance to copy.
     */
    private Builder(com.dcsg.pc.eventing.schema.syndigopimcopy.RelationshipLink other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.attributes)) {
        this.attributes = data().deepCopy(fields()[0].schema(), other.attributes);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.relTo)) {
        this.relTo = data().deepCopy(fields()[1].schema(), other.relTo);
        fieldSetFlags()[1] = true;
      }
      this.relToBuilder = null;
    }

    /**
      * Gets the value of the 'attributes' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,com.dcsg.pc.eventing.schema.syndigopimcopy.DataValues> getAttributes() {
      return attributes;
    }


    /**
      * Sets the value of the 'attributes' field.
      * @param value The value of 'attributes'.
      * @return This builder.
      */
    public com.dcsg.pc.eventing.schema.syndigopimcopy.RelationshipLink.Builder setAttributes(java.util.Map<java.lang.CharSequence,com.dcsg.pc.eventing.schema.syndigopimcopy.DataValues> value) {
      validate(fields()[0], value);
      this.attributes = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'attributes' field has been set.
      * @return True if the 'attributes' field has been set, false otherwise.
      */
    public boolean hasAttributes() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'attributes' field.
      * @return This builder.
      */
    public com.dcsg.pc.eventing.schema.syndigopimcopy.RelationshipLink.Builder clearAttributes() {
      attributes = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'relTo' field.
      * @return The value.
      */
    public com.dcsg.pc.eventing.schema.syndigopimcopy.Link getRelTo() {
      return relTo;
    }


    /**
      * Sets the value of the 'relTo' field.
      * @param value The value of 'relTo'.
      * @return This builder.
      */
    public com.dcsg.pc.eventing.schema.syndigopimcopy.RelationshipLink.Builder setRelTo(com.dcsg.pc.eventing.schema.syndigopimcopy.Link value) {
      validate(fields()[1], value);
      this.relToBuilder = null;
      this.relTo = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'relTo' field has been set.
      * @return True if the 'relTo' field has been set, false otherwise.
      */
    public boolean hasRelTo() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'relTo' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.dcsg.pc.eventing.schema.syndigopimcopy.Link.Builder getRelToBuilder() {
      if (relToBuilder == null) {
        if (hasRelTo()) {
          setRelToBuilder(com.dcsg.pc.eventing.schema.syndigopimcopy.Link.newBuilder(relTo));
        } else {
          setRelToBuilder(com.dcsg.pc.eventing.schema.syndigopimcopy.Link.newBuilder());
        }
      }
      return relToBuilder;
    }

    /**
     * Sets the Builder instance for the 'relTo' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.dcsg.pc.eventing.schema.syndigopimcopy.RelationshipLink.Builder setRelToBuilder(com.dcsg.pc.eventing.schema.syndigopimcopy.Link.Builder value) {
      clearRelTo();
      relToBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'relTo' field has an active Builder instance
     * @return True if the 'relTo' field has an active Builder instance
     */
    public boolean hasRelToBuilder() {
      return relToBuilder != null;
    }

    /**
      * Clears the value of the 'relTo' field.
      * @return This builder.
      */
    public com.dcsg.pc.eventing.schema.syndigopimcopy.RelationshipLink.Builder clearRelTo() {
      relTo = null;
      relToBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RelationshipLink build() {
      try {
        RelationshipLink record = new RelationshipLink();
        record.attributes = fieldSetFlags()[0] ? this.attributes : (java.util.Map<java.lang.CharSequence,com.dcsg.pc.eventing.schema.syndigopimcopy.DataValues>) defaultValue(fields()[0]);
        if (relToBuilder != null) {
          try {
            record.relTo = this.relToBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("relTo"));
            throw e;
          }
        } else {
          record.relTo = fieldSetFlags()[1] ? this.relTo : (com.dcsg.pc.eventing.schema.syndigopimcopy.Link) defaultValue(fields()[1]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RelationshipLink>
    WRITER$ = (org.apache.avro.io.DatumWriter<RelationshipLink>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RelationshipLink>
    READER$ = (org.apache.avro.io.DatumReader<RelationshipLink>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.attributes == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.attributes.size();
      out.writeMapStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (java.util.Map.Entry<java.lang.CharSequence, com.dcsg.pc.eventing.schema.syndigopimcopy.DataValues> e0: this.attributes.entrySet()) {
        actualSize0++;
        out.startItem();
        out.writeString(e0.getKey());
        com.dcsg.pc.eventing.schema.syndigopimcopy.DataValues v0 = e0.getValue();
        v0.customEncode(out);
      }
      out.writeMapEnd();
      if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

    this.relTo.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.attributes = null;
      } else {
        long size0 = in.readMapStart();
        java.util.Map<java.lang.CharSequence,com.dcsg.pc.eventing.schema.syndigopimcopy.DataValues> m0 = this.attributes; // Need fresh name due to limitation of macro system
        if (m0 == null) {
          m0 = new java.util.HashMap<java.lang.CharSequence,com.dcsg.pc.eventing.schema.syndigopimcopy.DataValues>((int)size0);
          this.attributes = m0;
        } else m0.clear();
        for ( ; 0 < size0; size0 = in.mapNext()) {
          for ( ; size0 != 0; size0--) {
            java.lang.CharSequence k0 = null;
            k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
            com.dcsg.pc.eventing.schema.syndigopimcopy.DataValues v0 = null;
            if (v0 == null) {
              v0 = new com.dcsg.pc.eventing.schema.syndigopimcopy.DataValues();
            }
            v0.customDecode(in);
            m0.put(k0, v0);
          }
        }
      }

      if (this.relTo == null) {
        this.relTo = new com.dcsg.pc.eventing.schema.syndigopimcopy.Link();
      }
      this.relTo.customDecode(in);

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.attributes = null;
          } else {
            long size0 = in.readMapStart();
            java.util.Map<java.lang.CharSequence,com.dcsg.pc.eventing.schema.syndigopimcopy.DataValues> m0 = this.attributes; // Need fresh name due to limitation of macro system
            if (m0 == null) {
              m0 = new java.util.HashMap<java.lang.CharSequence,com.dcsg.pc.eventing.schema.syndigopimcopy.DataValues>((int)size0);
              this.attributes = m0;
            } else m0.clear();
            for ( ; 0 < size0; size0 = in.mapNext()) {
              for ( ; size0 != 0; size0--) {
                java.lang.CharSequence k0 = null;
                k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
                com.dcsg.pc.eventing.schema.syndigopimcopy.DataValues v0 = null;
                if (v0 == null) {
                  v0 = new com.dcsg.pc.eventing.schema.syndigopimcopy.DataValues();
                }
                v0.customDecode(in);
                m0.put(k0, v0);
              }
            }
          }
          break;

        case 1:
          if (this.relTo == null) {
            this.relTo = new com.dcsg.pc.eventing.schema.syndigopimcopy.Link();
          }
          this.relTo.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










