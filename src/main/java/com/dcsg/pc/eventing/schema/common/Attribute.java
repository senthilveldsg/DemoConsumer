/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.dcsg.pc.eventing.schema.common;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Attribute extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8922154040753802998L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Attribute\",\"namespace\":\"com.dcsg.pc.eventing.schema.common\",\"fields\":[{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"enterpriseId\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"values\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}]},{\"name\":\"variant\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"nestedAttributes\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":\"Attribute\"}}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Attribute> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Attribute> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Attribute> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Attribute> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Attribute> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Attribute to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Attribute from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Attribute instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Attribute fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence name;
  private java.lang.Long enterpriseId;
  private java.util.List<java.lang.CharSequence> values;
  private java.lang.Boolean variant;
  private java.util.List<java.util.List<com.dcsg.pc.eventing.schema.common.Attribute>> nestedAttributes;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Attribute() {}

  /**
   * All-args constructor.
   * @param name The new value for name
   * @param enterpriseId The new value for enterpriseId
   * @param values The new value for values
   * @param variant The new value for variant
   * @param nestedAttributes The new value for nestedAttributes
   */
  public Attribute(java.lang.CharSequence name, java.lang.Long enterpriseId, java.util.List<java.lang.CharSequence> values, java.lang.Boolean variant, java.util.List<java.util.List<com.dcsg.pc.eventing.schema.common.Attribute>> nestedAttributes) {
    this.name = name;
    this.enterpriseId = enterpriseId;
    this.values = values;
    this.variant = variant;
    this.nestedAttributes = nestedAttributes;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return enterpriseId;
    case 2: return values;
    case 3: return variant;
    case 4: return nestedAttributes;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.CharSequence)value$; break;
    case 1: enterpriseId = (java.lang.Long)value$; break;
    case 2: values = (java.util.List<java.lang.CharSequence>)value$; break;
    case 3: variant = (java.lang.Boolean)value$; break;
    case 4: nestedAttributes = (java.util.List<java.util.List<com.dcsg.pc.eventing.schema.common.Attribute>>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'enterpriseId' field.
   * @return The value of the 'enterpriseId' field.
   */
  public java.lang.Long getEnterpriseId() {
    return enterpriseId;
  }


  /**
   * Sets the value of the 'enterpriseId' field.
   * @param value the value to set.
   */
  public void setEnterpriseId(java.lang.Long value) {
    this.enterpriseId = value;
  }

  /**
   * Gets the value of the 'values' field.
   * @return The value of the 'values' field.
   */
  public java.util.List<java.lang.CharSequence> getValues() {
    return values;
  }


  /**
   * Sets the value of the 'values' field.
   * @param value the value to set.
   */
  public void setValues(java.util.List<java.lang.CharSequence> value) {
    this.values = value;
  }

  /**
   * Gets the value of the 'variant' field.
   * @return The value of the 'variant' field.
   */
  public java.lang.Boolean getVariant() {
    return variant;
  }


  /**
   * Sets the value of the 'variant' field.
   * @param value the value to set.
   */
  public void setVariant(java.lang.Boolean value) {
    this.variant = value;
  }

  /**
   * Gets the value of the 'nestedAttributes' field.
   * @return The value of the 'nestedAttributes' field.
   */
  public java.util.List<java.util.List<com.dcsg.pc.eventing.schema.common.Attribute>> getNestedAttributes() {
    return nestedAttributes;
  }


  /**
   * Sets the value of the 'nestedAttributes' field.
   * @param value the value to set.
   */
  public void setNestedAttributes(java.util.List<java.util.List<com.dcsg.pc.eventing.schema.common.Attribute>> value) {
    this.nestedAttributes = value;
  }

  /**
   * Creates a new Attribute RecordBuilder.
   * @return A new Attribute RecordBuilder
   */
  public static com.dcsg.pc.eventing.schema.common.Attribute.Builder newBuilder() {
    return new com.dcsg.pc.eventing.schema.common.Attribute.Builder();
  }

  /**
   * Creates a new Attribute RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Attribute RecordBuilder
   */
  public static com.dcsg.pc.eventing.schema.common.Attribute.Builder newBuilder(com.dcsg.pc.eventing.schema.common.Attribute.Builder other) {
    if (other == null) {
      return new com.dcsg.pc.eventing.schema.common.Attribute.Builder();
    } else {
      return new com.dcsg.pc.eventing.schema.common.Attribute.Builder(other);
    }
  }

  /**
   * Creates a new Attribute RecordBuilder by copying an existing Attribute instance.
   * @param other The existing instance to copy.
   * @return A new Attribute RecordBuilder
   */
  public static com.dcsg.pc.eventing.schema.common.Attribute.Builder newBuilder(com.dcsg.pc.eventing.schema.common.Attribute other) {
    if (other == null) {
      return new com.dcsg.pc.eventing.schema.common.Attribute.Builder();
    } else {
      return new com.dcsg.pc.eventing.schema.common.Attribute.Builder(other);
    }
  }

  /**
   * RecordBuilder for Attribute instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Attribute>
    implements org.apache.avro.data.RecordBuilder<Attribute> {

    private java.lang.CharSequence name;
    private java.lang.Long enterpriseId;
    private java.util.List<java.lang.CharSequence> values;
    private java.lang.Boolean variant;
    private java.util.List<java.util.List<com.dcsg.pc.eventing.schema.common.Attribute>> nestedAttributes;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.dcsg.pc.eventing.schema.common.Attribute.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.enterpriseId)) {
        this.enterpriseId = data().deepCopy(fields()[1].schema(), other.enterpriseId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.values)) {
        this.values = data().deepCopy(fields()[2].schema(), other.values);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.variant)) {
        this.variant = data().deepCopy(fields()[3].schema(), other.variant);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.nestedAttributes)) {
        this.nestedAttributes = data().deepCopy(fields()[4].schema(), other.nestedAttributes);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing Attribute instance
     * @param other The existing instance to copy.
     */
    private Builder(com.dcsg.pc.eventing.schema.common.Attribute other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.enterpriseId)) {
        this.enterpriseId = data().deepCopy(fields()[1].schema(), other.enterpriseId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.values)) {
        this.values = data().deepCopy(fields()[2].schema(), other.values);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.variant)) {
        this.variant = data().deepCopy(fields()[3].schema(), other.variant);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.nestedAttributes)) {
        this.nestedAttributes = data().deepCopy(fields()[4].schema(), other.nestedAttributes);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.dcsg.pc.eventing.schema.common.Attribute.Builder setName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.dcsg.pc.eventing.schema.common.Attribute.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'enterpriseId' field.
      * @return The value.
      */
    public java.lang.Long getEnterpriseId() {
      return enterpriseId;
    }


    /**
      * Sets the value of the 'enterpriseId' field.
      * @param value The value of 'enterpriseId'.
      * @return This builder.
      */
    public com.dcsg.pc.eventing.schema.common.Attribute.Builder setEnterpriseId(java.lang.Long value) {
      validate(fields()[1], value);
      this.enterpriseId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'enterpriseId' field has been set.
      * @return True if the 'enterpriseId' field has been set, false otherwise.
      */
    public boolean hasEnterpriseId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'enterpriseId' field.
      * @return This builder.
      */
    public com.dcsg.pc.eventing.schema.common.Attribute.Builder clearEnterpriseId() {
      enterpriseId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'values' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getValues() {
      return values;
    }


    /**
      * Sets the value of the 'values' field.
      * @param value The value of 'values'.
      * @return This builder.
      */
    public com.dcsg.pc.eventing.schema.common.Attribute.Builder setValues(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[2], value);
      this.values = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'values' field has been set.
      * @return True if the 'values' field has been set, false otherwise.
      */
    public boolean hasValues() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'values' field.
      * @return This builder.
      */
    public com.dcsg.pc.eventing.schema.common.Attribute.Builder clearValues() {
      values = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'variant' field.
      * @return The value.
      */
    public java.lang.Boolean getVariant() {
      return variant;
    }


    /**
      * Sets the value of the 'variant' field.
      * @param value The value of 'variant'.
      * @return This builder.
      */
    public com.dcsg.pc.eventing.schema.common.Attribute.Builder setVariant(java.lang.Boolean value) {
      validate(fields()[3], value);
      this.variant = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'variant' field has been set.
      * @return True if the 'variant' field has been set, false otherwise.
      */
    public boolean hasVariant() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'variant' field.
      * @return This builder.
      */
    public com.dcsg.pc.eventing.schema.common.Attribute.Builder clearVariant() {
      variant = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'nestedAttributes' field.
      * @return The value.
      */
    public java.util.List<java.util.List<com.dcsg.pc.eventing.schema.common.Attribute>> getNestedAttributes() {
      return nestedAttributes;
    }


    /**
      * Sets the value of the 'nestedAttributes' field.
      * @param value The value of 'nestedAttributes'.
      * @return This builder.
      */
    public com.dcsg.pc.eventing.schema.common.Attribute.Builder setNestedAttributes(java.util.List<java.util.List<com.dcsg.pc.eventing.schema.common.Attribute>> value) {
      validate(fields()[4], value);
      this.nestedAttributes = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'nestedAttributes' field has been set.
      * @return True if the 'nestedAttributes' field has been set, false otherwise.
      */
    public boolean hasNestedAttributes() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'nestedAttributes' field.
      * @return This builder.
      */
    public com.dcsg.pc.eventing.schema.common.Attribute.Builder clearNestedAttributes() {
      nestedAttributes = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Attribute build() {
      try {
        Attribute record = new Attribute();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.enterpriseId = fieldSetFlags()[1] ? this.enterpriseId : (java.lang.Long) defaultValue(fields()[1]);
        record.values = fieldSetFlags()[2] ? this.values : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[2]);
        record.variant = fieldSetFlags()[3] ? this.variant : (java.lang.Boolean) defaultValue(fields()[3]);
        record.nestedAttributes = fieldSetFlags()[4] ? this.nestedAttributes : (java.util.List<java.util.List<com.dcsg.pc.eventing.schema.common.Attribute>>) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Attribute>
    WRITER$ = (org.apache.avro.io.DatumWriter<Attribute>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Attribute>
    READER$ = (org.apache.avro.io.DatumReader<Attribute>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.name == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.name);
    }

    if (this.enterpriseId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.enterpriseId);
    }

    if (this.values == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.values.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (java.lang.CharSequence e0: this.values) {
        actualSize0++;
        out.startItem();
        out.writeString(e0);
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

    if (this.variant == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.variant);
    }

    if (this.nestedAttributes == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size1 = this.nestedAttributes.size();
      out.writeArrayStart();
      out.setItemCount(size1);
      long actualSize1 = 0;
      for (java.util.List<com.dcsg.pc.eventing.schema.common.Attribute> e1: this.nestedAttributes) {
        actualSize1++;
        out.startItem();
        long size2 = e1.size();
        out.writeArrayStart();
        out.setItemCount(size2);
        long actualSize2 = 0;
        for (com.dcsg.pc.eventing.schema.common.Attribute e2: e1) {
          actualSize2++;
          out.startItem();
          e2.customEncode(out);
        }
        out.writeArrayEnd();
        if (actualSize2 != size2)
          throw new java.util.ConcurrentModificationException("Array-size written was " + size2 + ", but element count was " + actualSize2 + ".");
      }
      out.writeArrayEnd();
      if (actualSize1 != size1)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.name = null;
      } else {
        this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.enterpriseId = null;
      } else {
        this.enterpriseId = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.values = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<java.lang.CharSequence> a0 = this.values;
        if (a0 == null) {
          a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("values").schema().getTypes().get(1));
          this.values = a0;
        } else a0.clear();
        SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
            e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
            a0.add(e0);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.variant = null;
      } else {
        this.variant = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.nestedAttributes = null;
      } else {
        long size1 = in.readArrayStart();
        java.util.List<java.util.List<com.dcsg.pc.eventing.schema.common.Attribute>> a1 = this.nestedAttributes;
        if (a1 == null) {
          a1 = new SpecificData.Array<java.util.List<com.dcsg.pc.eventing.schema.common.Attribute>>((int)size1, SCHEMA$.getField("nestedAttributes").schema().getTypes().get(1));
          this.nestedAttributes = a1;
        } else a1.clear();
        SpecificData.Array<java.util.List<com.dcsg.pc.eventing.schema.common.Attribute>> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.util.List<com.dcsg.pc.eventing.schema.common.Attribute>>)a1 : null);
        for ( ; 0 < size1; size1 = in.arrayNext()) {
          for ( ; size1 != 0; size1--) {
            java.util.List<com.dcsg.pc.eventing.schema.common.Attribute> e1 = (ga1 != null ? ga1.peek() : null);
            long size2 = in.readArrayStart();
            java.util.List<com.dcsg.pc.eventing.schema.common.Attribute> a2 = e1;
            if (a2 == null) {
              a2 = new SpecificData.Array<com.dcsg.pc.eventing.schema.common.Attribute>((int)size2, SCHEMA$.getField("nestedAttributes").schema().getTypes().get(1).getElementType());
              e1 = a2;
            } else a2.clear();
            SpecificData.Array<com.dcsg.pc.eventing.schema.common.Attribute> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<com.dcsg.pc.eventing.schema.common.Attribute>)a2 : null);
            for ( ; 0 < size2; size2 = in.arrayNext()) {
              for ( ; size2 != 0; size2--) {
                com.dcsg.pc.eventing.schema.common.Attribute e2 = (ga2 != null ? ga2.peek() : null);
                if (e2 == null) {
                  e2 = new com.dcsg.pc.eventing.schema.common.Attribute();
                }
                e2.customDecode(in);
                a2.add(e2);
              }
            }
            a1.add(e1);
          }
        }
      }

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.name = null;
          } else {
            this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.enterpriseId = null;
          } else {
            this.enterpriseId = in.readLong();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.values = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<java.lang.CharSequence> a0 = this.values;
            if (a0 == null) {
              a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("values").schema().getTypes().get(1));
              this.values = a0;
            } else a0.clear();
            SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
                e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
                a0.add(e0);
              }
            }
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.variant = null;
          } else {
            this.variant = in.readBoolean();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.nestedAttributes = null;
          } else {
            long size1 = in.readArrayStart();
            java.util.List<java.util.List<com.dcsg.pc.eventing.schema.common.Attribute>> a1 = this.nestedAttributes;
            if (a1 == null) {
              a1 = new SpecificData.Array<java.util.List<com.dcsg.pc.eventing.schema.common.Attribute>>((int)size1, SCHEMA$.getField("nestedAttributes").schema().getTypes().get(1));
              this.nestedAttributes = a1;
            } else a1.clear();
            SpecificData.Array<java.util.List<com.dcsg.pc.eventing.schema.common.Attribute>> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.util.List<com.dcsg.pc.eventing.schema.common.Attribute>>)a1 : null);
            for ( ; 0 < size1; size1 = in.arrayNext()) {
              for ( ; size1 != 0; size1--) {
                java.util.List<com.dcsg.pc.eventing.schema.common.Attribute> e1 = (ga1 != null ? ga1.peek() : null);
                long size2 = in.readArrayStart();
                java.util.List<com.dcsg.pc.eventing.schema.common.Attribute> a2 = e1;
                if (a2 == null) {
                  a2 = new SpecificData.Array<com.dcsg.pc.eventing.schema.common.Attribute>((int)size2, SCHEMA$.getField("nestedAttributes").schema().getTypes().get(1).getElementType());
                  e1 = a2;
                } else a2.clear();
                SpecificData.Array<com.dcsg.pc.eventing.schema.common.Attribute> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<com.dcsg.pc.eventing.schema.common.Attribute>)a2 : null);
                for ( ; 0 < size2; size2 = in.arrayNext()) {
                  for ( ; size2 != 0; size2--) {
                    com.dcsg.pc.eventing.schema.common.Attribute e2 = (ga2 != null ? ga2.peek() : null);
                    if (e2 == null) {
                      e2 = new com.dcsg.pc.eventing.schema.common.Attribute();
                    }
                    e2.customDecode(in);
                    a2.add(e2);
                  }
                }
                a1.add(e1);
              }
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










