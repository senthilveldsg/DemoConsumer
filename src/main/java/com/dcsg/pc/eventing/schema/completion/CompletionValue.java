/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.dcsg.pc.eventing.schema.completion;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class CompletionValue extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8658145947015151728L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CompletionValue\",\"namespace\":\"com.dcsg.pc.eventing.schema.completion\",\"fields\":[{\"name\":\"messageId\",\"type\":[\"string\"]},{\"name\":\"eventId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"entityId\",\"type\":\"string\"},{\"name\":\"entityType\",\"type\":{\"type\":\"enum\",\"name\":\"entityType\",\"symbols\":[\"sku\",\"style\",\"ecode\",\"unknown\"],\"default\":\"unknown\"}},{\"name\":\"actionType\",\"type\":{\"type\":\"enum\",\"name\":\"actionType\",\"symbols\":[\"create\",\"update\",\"unknown\"],\"default\":\"unknown\"}},{\"name\":\"completedOn\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"sourceName\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<CompletionValue> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CompletionValue> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CompletionValue> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CompletionValue> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CompletionValue> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CompletionValue to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CompletionValue from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CompletionValue instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CompletionValue fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.Object messageId;
  private java.lang.CharSequence eventId;
  private java.lang.CharSequence entityId;
  private com.dcsg.pc.eventing.schema.completion.entityType entityType;
  private com.dcsg.pc.eventing.schema.completion.actionType actionType;
  private java.time.Instant completedOn;
  private java.lang.CharSequence sourceName;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CompletionValue() {}

  /**
   * All-args constructor.
   * @param messageId The new value for messageId
   * @param eventId The new value for eventId
   * @param entityId The new value for entityId
   * @param entityType The new value for entityType
   * @param actionType The new value for actionType
   * @param completedOn The new value for completedOn
   * @param sourceName The new value for sourceName
   */
  public CompletionValue(java.lang.Object messageId, java.lang.CharSequence eventId, java.lang.CharSequence entityId, com.dcsg.pc.eventing.schema.completion.entityType entityType, com.dcsg.pc.eventing.schema.completion.actionType actionType, java.time.Instant completedOn, java.lang.CharSequence sourceName) {
    this.messageId = messageId;
    this.eventId = eventId;
    this.entityId = entityId;
    this.entityType = entityType;
    this.actionType = actionType;
    this.completedOn = completedOn.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.sourceName = sourceName;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return messageId;
    case 1: return eventId;
    case 2: return entityId;
    case 3: return entityType;
    case 4: return actionType;
    case 5: return completedOn;
    case 6: return sourceName;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: messageId = value$; break;
    case 1: eventId = (java.lang.CharSequence)value$; break;
    case 2: entityId = (java.lang.CharSequence)value$; break;
    case 3: entityType = (com.dcsg.pc.eventing.schema.completion.entityType)value$; break;
    case 4: actionType = (com.dcsg.pc.eventing.schema.completion.actionType)value$; break;
    case 5: completedOn = (java.time.Instant)value$; break;
    case 6: sourceName = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'messageId' field.
   * @return The value of the 'messageId' field.
   */
  public java.lang.Object getMessageId() {
    return messageId;
  }


  /**
   * Sets the value of the 'messageId' field.
   * @param value the value to set.
   */
  public void setMessageId(java.lang.Object value) {
    this.messageId = value;
  }

  /**
   * Gets the value of the 'eventId' field.
   * @return The value of the 'eventId' field.
   */
  public java.lang.CharSequence getEventId() {
    return eventId;
  }


  /**
   * Sets the value of the 'eventId' field.
   * @param value the value to set.
   */
  public void setEventId(java.lang.CharSequence value) {
    this.eventId = value;
  }

  /**
   * Gets the value of the 'entityId' field.
   * @return The value of the 'entityId' field.
   */
  public java.lang.CharSequence getEntityId() {
    return entityId;
  }


  /**
   * Sets the value of the 'entityId' field.
   * @param value the value to set.
   */
  public void setEntityId(java.lang.CharSequence value) {
    this.entityId = value;
  }

  /**
   * Gets the value of the 'entityType' field.
   * @return The value of the 'entityType' field.
   */
  public com.dcsg.pc.eventing.schema.completion.entityType getEntityType() {
    return entityType;
  }


  /**
   * Sets the value of the 'entityType' field.
   * @param value the value to set.
   */
  public void setEntityType(com.dcsg.pc.eventing.schema.completion.entityType value) {
    this.entityType = value;
  }

  /**
   * Gets the value of the 'actionType' field.
   * @return The value of the 'actionType' field.
   */
  public com.dcsg.pc.eventing.schema.completion.actionType getActionType() {
    return actionType;
  }


  /**
   * Sets the value of the 'actionType' field.
   * @param value the value to set.
   */
  public void setActionType(com.dcsg.pc.eventing.schema.completion.actionType value) {
    this.actionType = value;
  }

  /**
   * Gets the value of the 'completedOn' field.
   * @return The value of the 'completedOn' field.
   */
  public java.time.Instant getCompletedOn() {
    return completedOn;
  }


  /**
   * Sets the value of the 'completedOn' field.
   * @param value the value to set.
   */
  public void setCompletedOn(java.time.Instant value) {
    this.completedOn = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'sourceName' field.
   * @return The value of the 'sourceName' field.
   */
  public java.lang.CharSequence getSourceName() {
    return sourceName;
  }


  /**
   * Sets the value of the 'sourceName' field.
   * @param value the value to set.
   */
  public void setSourceName(java.lang.CharSequence value) {
    this.sourceName = value;
  }

  /**
   * Creates a new CompletionValue RecordBuilder.
   * @return A new CompletionValue RecordBuilder
   */
  public static com.dcsg.pc.eventing.schema.completion.CompletionValue.Builder newBuilder() {
    return new com.dcsg.pc.eventing.schema.completion.CompletionValue.Builder();
  }

  /**
   * Creates a new CompletionValue RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CompletionValue RecordBuilder
   */
  public static com.dcsg.pc.eventing.schema.completion.CompletionValue.Builder newBuilder(com.dcsg.pc.eventing.schema.completion.CompletionValue.Builder other) {
    if (other == null) {
      return new com.dcsg.pc.eventing.schema.completion.CompletionValue.Builder();
    } else {
      return new com.dcsg.pc.eventing.schema.completion.CompletionValue.Builder(other);
    }
  }

  /**
   * Creates a new CompletionValue RecordBuilder by copying an existing CompletionValue instance.
   * @param other The existing instance to copy.
   * @return A new CompletionValue RecordBuilder
   */
  public static com.dcsg.pc.eventing.schema.completion.CompletionValue.Builder newBuilder(com.dcsg.pc.eventing.schema.completion.CompletionValue other) {
    if (other == null) {
      return new com.dcsg.pc.eventing.schema.completion.CompletionValue.Builder();
    } else {
      return new com.dcsg.pc.eventing.schema.completion.CompletionValue.Builder(other);
    }
  }

  /**
   * RecordBuilder for CompletionValue instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CompletionValue>
    implements org.apache.avro.data.RecordBuilder<CompletionValue> {

    private java.lang.Object messageId;
    private java.lang.CharSequence eventId;
    private java.lang.CharSequence entityId;
    private com.dcsg.pc.eventing.schema.completion.entityType entityType;
    private com.dcsg.pc.eventing.schema.completion.actionType actionType;
    private java.time.Instant completedOn;
    private java.lang.CharSequence sourceName;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.dcsg.pc.eventing.schema.completion.CompletionValue.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.messageId)) {
        this.messageId = data().deepCopy(fields()[0].schema(), other.messageId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.eventId)) {
        this.eventId = data().deepCopy(fields()[1].schema(), other.eventId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.entityId)) {
        this.entityId = data().deepCopy(fields()[2].schema(), other.entityId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.entityType)) {
        this.entityType = data().deepCopy(fields()[3].schema(), other.entityType);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.actionType)) {
        this.actionType = data().deepCopy(fields()[4].schema(), other.actionType);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.completedOn)) {
        this.completedOn = data().deepCopy(fields()[5].schema(), other.completedOn);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.sourceName)) {
        this.sourceName = data().deepCopy(fields()[6].schema(), other.sourceName);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing CompletionValue instance
     * @param other The existing instance to copy.
     */
    private Builder(com.dcsg.pc.eventing.schema.completion.CompletionValue other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.messageId)) {
        this.messageId = data().deepCopy(fields()[0].schema(), other.messageId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.eventId)) {
        this.eventId = data().deepCopy(fields()[1].schema(), other.eventId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.entityId)) {
        this.entityId = data().deepCopy(fields()[2].schema(), other.entityId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.entityType)) {
        this.entityType = data().deepCopy(fields()[3].schema(), other.entityType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.actionType)) {
        this.actionType = data().deepCopy(fields()[4].schema(), other.actionType);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.completedOn)) {
        this.completedOn = data().deepCopy(fields()[5].schema(), other.completedOn);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.sourceName)) {
        this.sourceName = data().deepCopy(fields()[6].schema(), other.sourceName);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'messageId' field.
      * @return The value.
      */
    public java.lang.Object getMessageId() {
      return messageId;
    }


    /**
      * Sets the value of the 'messageId' field.
      * @param value The value of 'messageId'.
      * @return This builder.
      */
    public com.dcsg.pc.eventing.schema.completion.CompletionValue.Builder setMessageId(java.lang.Object value) {
      validate(fields()[0], value);
      this.messageId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'messageId' field has been set.
      * @return True if the 'messageId' field has been set, false otherwise.
      */
    public boolean hasMessageId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'messageId' field.
      * @return This builder.
      */
    public com.dcsg.pc.eventing.schema.completion.CompletionValue.Builder clearMessageId() {
      messageId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventId' field.
      * @return The value.
      */
    public java.lang.CharSequence getEventId() {
      return eventId;
    }


    /**
      * Sets the value of the 'eventId' field.
      * @param value The value of 'eventId'.
      * @return This builder.
      */
    public com.dcsg.pc.eventing.schema.completion.CompletionValue.Builder setEventId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.eventId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'eventId' field has been set.
      * @return True if the 'eventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'eventId' field.
      * @return This builder.
      */
    public com.dcsg.pc.eventing.schema.completion.CompletionValue.Builder clearEventId() {
      eventId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'entityId' field.
      * @return The value.
      */
    public java.lang.CharSequence getEntityId() {
      return entityId;
    }


    /**
      * Sets the value of the 'entityId' field.
      * @param value The value of 'entityId'.
      * @return This builder.
      */
    public com.dcsg.pc.eventing.schema.completion.CompletionValue.Builder setEntityId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.entityId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'entityId' field has been set.
      * @return True if the 'entityId' field has been set, false otherwise.
      */
    public boolean hasEntityId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'entityId' field.
      * @return This builder.
      */
    public com.dcsg.pc.eventing.schema.completion.CompletionValue.Builder clearEntityId() {
      entityId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'entityType' field.
      * @return The value.
      */
    public com.dcsg.pc.eventing.schema.completion.entityType getEntityType() {
      return entityType;
    }


    /**
      * Sets the value of the 'entityType' field.
      * @param value The value of 'entityType'.
      * @return This builder.
      */
    public com.dcsg.pc.eventing.schema.completion.CompletionValue.Builder setEntityType(com.dcsg.pc.eventing.schema.completion.entityType value) {
      validate(fields()[3], value);
      this.entityType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'entityType' field has been set.
      * @return True if the 'entityType' field has been set, false otherwise.
      */
    public boolean hasEntityType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'entityType' field.
      * @return This builder.
      */
    public com.dcsg.pc.eventing.schema.completion.CompletionValue.Builder clearEntityType() {
      entityType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'actionType' field.
      * @return The value.
      */
    public com.dcsg.pc.eventing.schema.completion.actionType getActionType() {
      return actionType;
    }


    /**
      * Sets the value of the 'actionType' field.
      * @param value The value of 'actionType'.
      * @return This builder.
      */
    public com.dcsg.pc.eventing.schema.completion.CompletionValue.Builder setActionType(com.dcsg.pc.eventing.schema.completion.actionType value) {
      validate(fields()[4], value);
      this.actionType = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'actionType' field has been set.
      * @return True if the 'actionType' field has been set, false otherwise.
      */
    public boolean hasActionType() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'actionType' field.
      * @return This builder.
      */
    public com.dcsg.pc.eventing.schema.completion.CompletionValue.Builder clearActionType() {
      actionType = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'completedOn' field.
      * @return The value.
      */
    public java.time.Instant getCompletedOn() {
      return completedOn;
    }


    /**
      * Sets the value of the 'completedOn' field.
      * @param value The value of 'completedOn'.
      * @return This builder.
      */
    public com.dcsg.pc.eventing.schema.completion.CompletionValue.Builder setCompletedOn(java.time.Instant value) {
      validate(fields()[5], value);
      this.completedOn = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'completedOn' field has been set.
      * @return True if the 'completedOn' field has been set, false otherwise.
      */
    public boolean hasCompletedOn() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'completedOn' field.
      * @return This builder.
      */
    public com.dcsg.pc.eventing.schema.completion.CompletionValue.Builder clearCompletedOn() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'sourceName' field.
      * @return The value.
      */
    public java.lang.CharSequence getSourceName() {
      return sourceName;
    }


    /**
      * Sets the value of the 'sourceName' field.
      * @param value The value of 'sourceName'.
      * @return This builder.
      */
    public com.dcsg.pc.eventing.schema.completion.CompletionValue.Builder setSourceName(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.sourceName = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'sourceName' field has been set.
      * @return True if the 'sourceName' field has been set, false otherwise.
      */
    public boolean hasSourceName() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'sourceName' field.
      * @return This builder.
      */
    public com.dcsg.pc.eventing.schema.completion.CompletionValue.Builder clearSourceName() {
      sourceName = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CompletionValue build() {
      try {
        CompletionValue record = new CompletionValue();
        record.messageId = fieldSetFlags()[0] ? this.messageId :  defaultValue(fields()[0]);
        record.eventId = fieldSetFlags()[1] ? this.eventId : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.entityId = fieldSetFlags()[2] ? this.entityId : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.entityType = fieldSetFlags()[3] ? this.entityType : (com.dcsg.pc.eventing.schema.completion.entityType) defaultValue(fields()[3]);
        record.actionType = fieldSetFlags()[4] ? this.actionType : (com.dcsg.pc.eventing.schema.completion.actionType) defaultValue(fields()[4]);
        record.completedOn = fieldSetFlags()[5] ? this.completedOn : (java.time.Instant) defaultValue(fields()[5]);
        record.sourceName = fieldSetFlags()[6] ? this.sourceName : (java.lang.CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CompletionValue>
    WRITER$ = (org.apache.avro.io.DatumWriter<CompletionValue>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CompletionValue>
    READER$ = (org.apache.avro.io.DatumReader<CompletionValue>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










